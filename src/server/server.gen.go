// Package access_tester provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"access-tester/src/common"
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Test URLs
	// (GET /status)
	CheckStatus(w http.ResponseWriter, r *http.Request, params common.CheckStatusParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Test URLs
// (GET /status)
func (_ Unimplemented) CheckStatus(w http.ResponseWriter, r *http.Request, params common.CheckStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CheckStatus operation middleware
func (siw *ServerInterfaceWrapper) CheckStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params common.CheckStatusParams

	// ------------- Required query parameter "host" -------------

	if paramValue := r.URL.Query().Get("host"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "host"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "host", r.URL.Query(), &params.Host)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "host", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckStatus(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status", wrapper.CheckStatus)
	})

	return r
}

type CheckStatusRequestObject struct {
	Params common.CheckStatusParams
}

type CheckStatusResponseObject interface {
	VisitCheckStatusResponse(w http.ResponseWriter) error
}

type CheckStatus200JSONResponse common.Result

func (response CheckStatus200JSONResponse) VisitCheckStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CheckStatus400Response struct {
}

func (response CheckStatus400Response) VisitCheckStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CheckStatus500Response struct {
}

func (response CheckStatus500Response) VisitCheckStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Test URLs
	// (GET /status)
	CheckStatus(ctx context.Context, request CheckStatusRequestObject) (CheckStatusResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CheckStatus operation middleware
func (sh *strictHandler) CheckStatus(w http.ResponseWriter, r *http.Request, params common.CheckStatusParams) {
	var request CheckStatusRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CheckStatus(ctx, request.(CheckStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CheckStatusResponseObject); ok {
		if err := validResponse.VisitCheckStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWT2/buBP9KgO2QBPUkZ1f8jusLkHabFEvskCQJnuJswBNjSQ2EqkOh3GNrL/7Yij5",
	"39rY+x4CEAw1fPPmvUe/KePbzjt0HFT+poKpsdVpeY8hNiyrAoMh27H1TuXDPvgSTI3mxboKCt9q69RI",
	"deQ7JLaYKhjtPuGnxpsXLA7rfNYOuLYBCIOPZBDmCNpw1E2zhHn/Gcx1wAK8g8CaYwDjCwTtCmCyVYUE",
	"XU06YFAjhT912zWocqaII8XLDlWu5t43qJ1ajVTtw5F+/tBNRGmHa4SvDw938NUHhhp1gQRRrmcPxjuH",
	"hmW5xrt75XqVGd+mfUZyurnxJhzeeD33kQ+uUiMVqVG5qpm7kI/Hi8Uio9KcYWHZU+apGlNp5O+X8/PJ",
	"O6dbPJOWzrQrznTk2pPlpTRaemo1y6y+fJazex29Sr9qw09gsq6Sr3qGD+EmoDv07/Z9ObnYVLKOsUKS",
	"UsNw7vrZfPHRHRHANZFeCvG6aaCUM/821CeljcEQoEBnsVDPI2UZ24S3te4WXcW1ys+PNDZsaLlPrVYj",
	"RfgjWhJRPvWiGO1rdcPF8U6eNyX9/DsaVispal3pk+q9Y22S0GRESekda+tunBc0+yR8s9IeXN9NgWvN",
	"woVfBFj6KFJjDAy23FpkYbmGjvyrLbCASA0QciQX4HJyAQNDySOeoNPV+osePjT2BeHDHpEf4DFgGWUC",
	"BAV2jV+Kpa2DNjZsBVzjjRa4AU4wqzIobFkioWMwPjomi+E0eUTyYA+uDb2RpWKSkTCPgQOU5FtxXMBt",
	"kZlESGMNuoA79P0+fUhTtJycdt2jf8DAUvb6bqpG6hUp9ISeZ5NsIud9h053VuXqIptkF5JOmuukl/FW",
	"6hUeiQSpnVS5y3RIDPXc2bltLC8zmJbweH8rfa6PjkAUJdBlF38yacNYgI7sW83WSLylTiUqE6/TQkQi",
	"5H1by67TpFtkpKDyp7e1CxLidfkU17FtNS1Vrn6LgYcchnT5EGg7YdUbfz+qxPZxPuT3XsGbvlaSz+ZI",
	"St7OE++Uk5iqvK/6ivnl5YXq7aBy9SMiLdVoPcnBa1v79UndPzqHYxiO/xfCtNMsIFWu/jy5ymezxceT",
	"qzyfzYqPp1fvT/86ucpPZHM2y04/7v/39P1hFq+ehaTQeRf6mf9vMllHC7okWN11je1tOf4evNs+3rJ6",
	"T1iqXL0bb1/38fC0j4d3PWXWPpW/bsS61ljo50/pk5A01dtOiLnsQf3z10EyOCx0gFY3Qh4Wcvr/x05P",
	"XT9aCEivSIBEnpJ8tkJMZny8vw0CefV3AAAA//9tWh/asQgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
